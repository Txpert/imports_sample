{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Python Lesson: Functions\n",
    "\n",
    "## Lesson Objectives\n",
    "- Verstehen des Konzepts von Funktionen als wiederverwendbare Routinen.\n",
    "- Syntax zur Definition von Funktionen kennen und anwenden.\n",
    "- Funktionen mit und ohne Argumente und Rückgabewerte definieren.\n",
    "- Funktionen mit der Lambda-Notation definieren.\n",
    "- Funktionen aufrufen.\n",
    "- Funktionen als Objekte behandeln.\n",
    "- Verstehen von Sichtbarkeitsbereichen (Scope)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Einführung in Funktionen\n",
    "\n",
    "Funktionen sind wiederverwendbare Code-Blöcke. Sie werden mit dem `def`-Schlüsselwort definiert."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Beispiel:\n",
    "def hallo():\n",
    "    print(\"Hallo, Welt!\")\n",
    "    \n# Funktion aufrufen\n",
    "hallo()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funktionen mit Argumenten\n",
    "\n",
    "Funktionen können Argumente annehmen, die sie bei ihrer Ausführung verwenden."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Beispiel:\n",
    "def begruessung(name):\n",
    "    print(f\"Hallo, {name}!\")\n",
    "    \n# Funktion aufrufen\n",
    "begruessung(\"Alice\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funktionen mit Rückgabewert\n",
    "\n",
    "Funktionen können Werte mit dem `return`-Schlüsselwort zurückgeben."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Beispiel:\n",
    "def addiere(a, b):\n",
    "    return a + b\n",
    "    \n# Funktion aufrufen und Ergebnis speichern\n",
    "ergebnis = addiere(3, 4)\n",
    "print(ergebnis)  # Ausgabe: 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lambda-Funktionen\n",
    "\n",
    "Kleine anonyme Funktionen können mit `lambda` definiert werden."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Beispiel:\n",
    "addiere = lambda a, b: a + b\n",
    "print(addiere(3, 4))  # Ausgabe: 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funktionen aufrufen\n",
    "\n",
    "Funktionen werden durch ihren Namen und Klammern aufgerufen."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Beispiel:\n",
    "def begruessung(name):\n",
    "    print(f\"Hallo, {name}!\")\n",
    "    \n# Funktion aufrufen\n",
    "begruessung(\"Bob\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funktionen als Objekte\n",
    "\n",
    "Funktionen können als Argumente an andere Funktionen übergeben werden."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Beispiel:\n",
    "def rufe_funktion_auf(func):\n",
    "    func()\n",
    "\n",
    "def hallo():\n",
    "    print(\"Hallo, Welt!\")\n",
    "    \n# Funktion als Argument übergeben\n",
    "rufe_funktion_auf(hallo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scope in Python\n",
    "\n",
    "Scope bestimmt die Sichtbarkeit von Variablen. Neuer Scope wird durch Module, Funktionen und Lambdas erstellt."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Beispiel:\n",
    "x = 10  # globale Variable\n",
    "\n",
    "def foo():\n",
    "    x = 5  # lokale Variable\n",
    "    print(x)  # Ausgabe: 5\n",
    "\n",
    "foo()\n",
    "print(x)  # Ausgabe: 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Praktische Übungen\n",
    "\n",
    "1. Definiere eine Funktion, die zwei Zahlen multipliziert.\n",
    "2. Definiere eine Lambda-Funktion, die eine Zahl quadriert.\n",
    "3. Schreibe eine Funktion, die eine andere Funktion als Argument nimmt.\n",
    "4. Übe den Umgang mit Scope in einer Funktion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Aufgabe 1: Funktion, die zwei Zahlen multipliziert\n",
    "def multipliziere(a, b):\n",
    "    return a * b\n",
    "\n",
    "print(multipliziere(3, 4))  # Ausgabe: 12\n",
    "\n",
    "# Aufgabe 2: Lambda-Funktion, die eine Zahl quadriert\n",
    "quadrat = lambda x: x * x\n",
    "print(quadrat(5))  # Ausgabe: 25\n",
    "\n",
    "# Aufgabe 3: Funktion, die eine andere Funktion als Argument nimmt\n",
    "def ausfuehren(funktion):\n",
    "    funktion()\n",
    "\n",
    "def hallo():\n",
    "    print(\"Hallo, Welt!\")\n",
    "\n",
    "ausfuehren(hallo)  # Ausgabe: Hallo, Welt!\n",
    "\n",
    "# Aufgabe 4: Umgang mit Scope\n",
    "y = 10\n",
    "\n",
    "def aussen():\n",
    "    y = 5\n",
    "    def innen():\n",
    "        nonlocal y\n",
    "        y = 2\n",
    "        print(y)  # Ausgabe: 2\n",
    "    innen()\n",
    "    print(y)  # Ausgabe: 2\n",
    "\n",
    "aussen()\n",
    "print(y)  # Ausgabe: 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Zusammenfassung und Q&A\n",
    "\n",
    "### Wiederholung der wichtigsten Punkte:\n",
    "- Definition und Nutzung von Funktionen\n",
    "- Argumente und Rückgabewerte\n",
    "- Lambda-Funktionen\n",
    "- Funktionen als Objekte\n",
    "- Scope\n",
    "\n",
    "### Fragen und Antworten"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
